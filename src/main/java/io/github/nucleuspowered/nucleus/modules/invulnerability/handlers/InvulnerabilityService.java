/*
 * This file is part of Nucleus, licensed under the MIT License (MIT). See the LICENSE.txt file
 * at the root of this project for more details.
 */
package io.github.nucleuspowered.nucleus.modules.invulnerability.handlers;

import io.github.nucleuspowered.nucleus.Nucleus;
import io.github.nucleuspowered.nucleus.api.exceptions.NucleusException;
import io.github.nucleuspowered.nucleus.api.service.NucleusInvulnerabilityService;
import io.github.nucleuspowered.nucleus.dataservices.modular.ModularUserService;
import io.github.nucleuspowered.nucleus.modules.invulnerability.datamodules.InvulnerabilityUserDataModule;
import org.spongepowered.api.entity.living.player.User;
import org.spongepowered.api.text.Text;
import org.spongepowered.api.util.annotation.NonnullByDefault;

@NonnullByDefault
public class InvulnerabilityService implements NucleusInvulnerabilityService {

    @Override
    public boolean isInvulnerable(User user) {
        return Nucleus.getNucleus().getUserDataManager().get(user).map(x -> x.get(InvulnerabilityUserDataModule.class).isInvulnerable()).orElse(false);
    }

    @Override
    public void setInvulnerable(User user, boolean invulnerable) throws NucleusException {
        ModularUserService mus = Nucleus.getNucleus().getUserDataManager().get(user)
                .orElseThrow(() -> new NucleusException(
                        Text.of("User does not have a data file available"), NucleusException.ExceptionType.DOES_NOT_EXIST));

        mus.get(InvulnerabilityUserDataModule.class).setInvulnerable(invulnerable);
        if (!mus.save()) {
            throw new NucleusException(Text.of("Could not save data"), NucleusException.ExceptionType.UNKNOWN_ERROR);
        }
    }
}
