/*
 * This file is part of Nucleus, licensed under the MIT License (MIT). See the LICENSE.txt file
 * at the root of this project for more details.
 */
package io.github.nucleuspowered.nucleus.modules.invulnerability.listeners;

import io.github.nucleuspowered.nucleus.internal.ListenerBase;
import io.github.nucleuspowered.nucleus.internal.annotations.SkipOnError;
import io.github.nucleuspowered.nucleus.modules.invulnerability.datamodules.InvulnerabilityUserDataModule;
import org.spongepowered.api.entity.Entity;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.event.Listener;
import org.spongepowered.api.event.entity.ai.SetAITargetEvent;
import org.spongepowered.api.event.entity.ai.SetAttackTargetEvent;
import org.spongepowered.api.event.filter.Getter;

@SkipOnError // only for new versions of Sponge
public class InvulnPreventTargettingListener extends ListenerBase {

    @Listener
    public void onSetAITargetEvent(SetAITargetEvent event, @Getter("getTarget") Entity entity) {
        if (entity instanceof Player &&
            plugin.getUserDataManager().get((Player) entity)
                    .map(x -> x.get(InvulnerabilityUserDataModule.class).isInvulnerable()).orElse(false)) {
            event.setCancelled(true); // cancel the change
        }
    }
}
